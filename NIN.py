# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vgbyFG3iUSzKdkAXC2TxPotLWyGEagJC
"""

import numpy as np
import os
import PIL
import PIL.Image
import tensorflow as tf

batch_size = 32
img_height = 224
img_width = 224

data_dir = "/content/drive/MyDrive/tf/VGG16/Dataset_Palace_Museum"

train_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir,
                                                               validation_split=0.2,
                                                               subset="training",
                                                               seed=123,
                                                               image_size=(img_height, img_width),
                                                               batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir, validation_split=0.2, subset="validation", seed=123,
                                                             image_size=(img_height, img_width),
                                                             batch_size=batch_size)


AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)


num_classes = 10

from tensorflow.keras import layers
from tensorflow.keras.layers import Conv2D, MaxPool2D, BatchNormalization
from tensorflow import keras

def nin_block(filters, kernel, strides, padding):
    block = keras.Sequential([])
    block.add(Conv2D(filters, kernel, strides, padding))
    block.add(BatchNormalization())
    block.add(layers.Activation("relu"))
    return block


def get_model(img_size, num_classes):
    inputs = tf.keras.layers.InputLayer(input_shape=img_size + (3,))
    model = tf.keras.Sequential([inputs,])
    model.add(nin_block(192, 5, 1, "same"))
    model.add(nin_block(160, 1, 1, "same"))
    model.add(nin_block(96, 1, 1, "same"))
    model.add(MaxPool2D((3, 3), (2, 2), padding="same"))
    model.add(layers.Dropout(0.2))
    model.add(nin_block(192, 5, 1, "same"))
    model.add(nin_block(192, 1, 1, "same"))
    model.add(nin_block(192, 1, 1, "same"))
    model.add(MaxPool2D((3, 3), (2, 2), padding="same"))
    model.add(layers.Dropout(0.2))
    model.add(nin_block(192, 3, 1, "same"))
    model.add(nin_block(192, 1, 1, "same"))
    model.add(nin_block(num_classes, 1, 1, "same"))

    model.add(layers.GlobalAveragePooling2D())
    model.add(layers.Activation("softmax"))    

    return model

model = get_model((img_height, img_width), num_classes)
model.summary()

model.compile(optimizer="adam",
              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=False),
              metrics=["accuracy"])

model.fit(train_ds, validation_data=val_ds, epochs=15)



