# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TONtM6SU_mjTKgX_rN0ALzjjN4_34l3s
"""

# import os

# os.chdir("/content/drive/MyDrive/tf/VGG16/")

# from google.colab import drive
# drive.mount('/content/drive')

# !pwd

from tensorflow import Tensor
from tensorflow.keras.layers import Input, Conv2D, ReLU, BatchNormalization,Add,\
                                     Flatten, Dense, AveragePooling2D
from tensorflow.keras.models import Model
import tensorflow as tf

def relu_bn(inputs: Tensor):
    relu = ReLU()(inputs)
    bn = BatchNormalization()(relu)
    return bn

def residual_block(x: Tensor, downsample: bool, filters: int, kernel_size: int = 3) -> Tensor:
    y = Conv2D(kernel_size=kernel_size, strides=(1 if not downsample else 2), filters=filters, padding="same")(x)

    y = relu_bn(y)

    y = Conv2D(kernel_size=kernel_size, strides=1, filters=filters, padding="same")(y)

    if downsample:
        x = Conv2D(kernel_size=1, strides=2, filters=filters, padding="same")(x)

    out = Add()([x, y])
    out = relu_bn(out)
    return out

def create_res_net():
    inputs = Input(shape=(32, 32, 3))
    num_filters = 64

    t = BatchNormalization()(inputs)

    t = Conv2D(kernel_size=3, strides=1, filters=num_filters, padding="same")(t)

    t = relu_bn(t)

    num_blocks_list = [2, 5, 5, 2]

    for i in range(len(num_blocks_list)):
        num_blocks = num_blocks_list[i]
        for j in range(num_blocks):
            t = residual_block(t, downsample=(j==0 and i != 0), filters=num_filters)
        num_filters *= 2

    t = AveragePooling2D(4)(t)
    t = Flatten()(t)
    outputs = Dense(10, activation="softmax")(t)
    model = Model(inputs, outputs)
    # model.compile(optimizer="adam", loss="sparse_categorical_crossentropy",
    #               metrics=['accuracy'])
    
    return model

model = create_res_net()
model.summary()

# lr_schedule = tf.keras.optimizers.schedules.InverseTimeDecay(0.001. )

