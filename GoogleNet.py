# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vgbyFG3iUSzKdkAXC2TxPotLWyGEagJC
"""

import numpy as np
import os
import PIL
import PIL.Image
import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.layers import Conv2D, MaxPool2D, BatchNormalization, Dense, Dropout, GlobalAveragePooling2D
from tensorflow import keras
from tensorflow.keras.layers import concatenate, Input
from tensorflow.keras.models import Model

batch_size = 32
img_height = 224
img_width = 224

data_dir = "/content/drive/MyDrive/tf/VGG16/Dataset_Palace_Museum"

train_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir,
                                                               validation_split=0.2,
                                                               subset="training",
                                                               seed=123,
                                                               image_size=(img_height, img_width),
                                                               batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(data_dir, validation_split=0.2, subset="validation", seed=123,
                                                             image_size=(img_height, img_width),
                                                             batch_size=batch_size)


AUTOTUNE = tf.data.AUTOTUNE

train_ds = train_ds.cache().prefetch(buffer_size=AUTOTUNE)
val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)


num_classes = 10

def Inception_block(input_layer, f1, f2_conv1, f2_conv3, f3_conv1, f3_conv5, f4):
    path1 = Conv2D(f1, 1, padding="same", activation="relu")(input_layer)

    path2 = Conv2D(f2_conv1, 1, 1, "same", activation="relu")(input_layer)
    path2 = Conv2D(f2_conv3, 3, 1, "same", activation="relu")(path2)

    path3 = Conv2D(f3_conv1, 1, 1, "same", activation="relu")(input_layer)
    path3 = Conv2D(f3_conv5, 5, 1, "same", activation="relu")(path3)

    path4 = MaxPool2D((3, 3), strides=(1, 1), padding="same")(input_layer)
    path4 = Conv2D(f4, 1, 1, "same", activation="relu")(path4)

    output_layer = concatenate([path1, path2, path3, path4], axis=-1)
    
    return output_layer

def GoogleNet():
    input_layer = Input(shape = (224, 224, 3))

    x = Conv2D(64, 7, 2, activation="relu")(input_layer)

    x = MaxPool2D(pool_size=(3, 3), strides=2)(x)

    x = Conv2D(64, 1, 1, "same", activation="relu")(x)

    x = Conv2D(192, 3, 1, "same", activation="relu")(x)

    x = MaxPool2D(3, 2)(x)

    x = Inception_block(x, 64, 96, 128, 16, 32, 32)

    x = Inception_block(x, 128, 128, 192, 32, 96, 64)

    x = MaxPool2D(3, 2)(x)

    x = Inception_block(x, 192, 96, 208, 16, 48, 64)


    # X2 = AveragePooling2D(pool_size = (5,5), strides = 3)(x)
    # X2 = Conv2D(filters = 128, kernel_size = (1,1), padding = 'same', activation = 'relu')(X2)
    # X2 = Flatten()(X2)
    # X2 = Dense(1024, activation = 'relu')(X2)
    # X2 = Dropout(0.7)(X2)
    # X2 = Dense(1000, activation = 'softmax')(X2)

    x = Inception_block(x, 256, 260, 320, 32, 128, 128)

    x = MaxPool2D(3, 2)(x)

    x = Inception_block(x, 256, 160, 320, 32, 128, 128)

    x = Inception_block(x, 384, 192, 384, 48, 128, 128)

    x = GlobalAveragePooling2D(name="GAPL")(x)

    x = Dropout(0.4)(x)

    x = Dense(1000, activation="softmax")(x)

    x = Dense(5, activation="softmax")(x)

    x = Dense(10, activation="softmax")(x)

    model = Model(input_layer, x, name="GoogleNet")

    return model

# model = get_model((img_height, img_width), num_classes)
model = GoogleNet()
model.summary()

model.compile(optimizer="adam",
              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=False),
              metrics=["accuracy"])

model.fit(train_ds, validation_data=val_ds, epochs=15)



